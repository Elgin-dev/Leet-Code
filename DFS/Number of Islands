1.Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

2. simple description :

üèùÔ∏è Number of Islands ‚Äî Problem Description
Given a 2D binary grid where:
'1' represents land
'0' represents water
An island is formed by connecting adjacent lands horizontally or vertically.
The goal is to count the total number of separate islands in the grid.

3. Approach:

*Loop through each cell in the grid.
*When a '1' is found, start a Depth-First Search (DFS) to explore all connected '1's (land).
*Mark visited land cells to avoid revisiting.
*Each DFS call marks one full island, so increment the island count.
*Return the total number of islands.



4.solution :
   class Solution(object):
    def numIslands(self, grid):
        if not  grid:
            return 0
        count=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                   if grid[i][j]=='1':
                      self.dfs(grid,i,j)
                      count+=1
        return count
    def dfs(self,grid,i,j):
        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid [i][j] != '1':
            return

        grid[i][j]='#'
        self.dfs(grid,i-1,j)
        self.dfs(grid,i+1,j)
        self.dfs(grid,i,j-1)
        self.dfs(grid,i,j+1)    

